
import [types]

constant degree= 2



procedure Mul (
	input a : SWord ;
	input b : SWord ;
	output c : SWord
) is

variable r1 : SWord
variable r2 : SWord
variable r3 : SWord
variable neg : 3 bits

begin
--loop

a ->r3 ;
b ->r2 ;
r1 := 0;
neg := 0;

if #r2[31] = 1 then --r2<0 then
  r2 := -r2 ||
  neg := (neg + 1 as 3 bits)
end ;

if #r3[31] =1 then--r3<0 then
  r3 := -r3 ||
  neg := (neg + 1 as 3 bits)
end ;

loop while r3>0 then
r1 := (r1+r2 as SWord) ;
r3 := (r3-1 as SWord)
end  --while

;

if neg = 1 then
 r1 := -r1
end
;
--a,b->! then
c <- r1
--end 

--end --loop
end --procedure




procedure Poly_eval (
		input x : SWord;
		array 0..degree of input coefs : SWord;
		output a : SWord
		) is

		variable aV : SWord
		variable i : SWord
		variable tempV : SWord
		variable xV :SWord

		channel addRes : SWord
		channel temp : SWord
                channel ch : SWord
		channel ch2 : SWord
		



		begin
		loop
		x -> then
		xV := x ;
		coefs[degree] -> aV ||

		i := degree - 1 ;

		loop while #i[31] /= 1 then --while i>=0 then
		ch <- aV ||
		ch2 <- xV ||
		Mul(ch,ch2,temp)  ||
		case i of
		for j in 0..degree then
		temp,coefs[j] -> then
		addRes <- ((temp + coefs[j]) as SWord)
		end
		end ||
		addRes ->tempV ; 

		aV := tempV ;
		i := (i-1 as SWord) 
		end -- while

		;

		a <- aV
		end --inp
		end --loop

	  end  --procedure

